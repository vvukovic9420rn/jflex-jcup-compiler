//import section

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

import SymbolTable.*;

parser code {:
 
    public int errNo = 0;
    public int warnNo = 0;

    SymbolTable symbolTable;

    public static void main(String[] args){
        try{
            FileReader file = new FileReader(args[0]);
            java_cup.runtime.Scanner scanner = new MPLexer(file);
            MPParser parser = new MPParser(scanner);
            parser.parse();
            parser.checkWarnings();

            if(parser.errNo == 0){
                System.out.println("Scan finished. No errors found.");
            }
            else{
                System.out.println("Scan finished. Errors found: " + parser.errNo);
            }
        }
        catch( Exception e ){
           System.out.println(e);
        }
    }

    public void checkWarnings(){
        SymbolNode current = symbolTable.getVariables();

        while(current != null) {
            Variable var = (Variable) current;
            if (var.last_def == -1 && var.last_use == -1) {
                System.out.println("Warning: Variable " + var.name + " declared, but never used.");
                warnNo++;
            }
            else if ( var.last_def > var.last_use ) {
                System.out.println( "Warning: Value in variable " + var.name + " in line " + var.last_def + " never used." );
                warnNo++;
            }
            current = current.next;
        }
    }

    public void syntax_error(Symbol currentToken){
    }

    public void report_error(String message, Object info){
       System.out.print( message );
    }

    public int getLine(){
      return ((MPLexer) getScanner()).getLine();
    }

:};

init with {:
	symbolTable = new SymbolTable();
:}


//Terminal symbols
terminal PROGRAM, BEGIN, END, INT, CHAR, REAL, FOR, TO, BY, DOWNTO, READ, WRITE;
terminal PLUS, MINUS, MUL, DIV, MOD, LEFTPAR, RIGHTPAR, ASSIGN, SEMI, COMMA;
terminal String ID;
terminal Integer INTCONST;
terminal Character CHARCONST;
terminal Double REALCONST;


//Nonterminal symbols
non terminal Program, Block, VarSection, StatementList, Statement, VarDecl;
non terminal Assignment, ExpressionList, AddOperator, MulOperator;
non terminal Constant Const;
non terminal ArrayList NameList;
non terminal Type Type, Expression, Term, Factor;

//Grammar
Program ::= PROGRAM ID Block;

Block ::= BEGIN VarSection StatementList END;

VarSection ::= VarSection VarDecl
            | VarDecl;

VarDecl ::= Type:type NameList:nameList SEMI
            {:
                for(int i = 0; i < nameList.size(); i++){
                    String name = (String) nameList.get(i);

                    if(!parser.symbolTable.addVar(name, type)){
                        System.out.println("Error in line " + parser.getLine() + ": " + "Variable " + name + " already declared.");
                    }
                }
            :}
            ;

NameList ::= NameList COMMA ID
            | ID;

Type ::= INT
        | CHAR
        | REAL;

StatementList ::= StatementList Statement
                | Statement;

Statement ::= FOR Assignment TO Expression BY Const Statement
            | FOR Assignment DOWNTO Expression BY Const Statement
            | Assignment SEMI
            | READ LEFTPAR NameList RIGHTPAR SEMI
            | WRITE LEFTPAR ExpressionList RIGHTPAR SEMI
            | Block;

Const ::= INTCONST
        | REALCONST
        | CHARCONST;

Assignment ::= ID:varName ASSIGN Expression:e
            {:
                Variable var = parser.symbolTable.getVar(varName);

                if(var == null){
                    System.out.println("Error in line " + parser.getLine() + ": Variable " + varName + " not declared.");
                    parser.errNo++;
                }
                else{
                    var.last_def = parser.getLine();
                    if(var.type.tkind == Type.REAL && (e.tkind != Type.REAL && e.tkind != Type.INTEGER && e.tkind != Type.CHARACTER)){
                        System.out.println( "Error in line " + parser.getLine() + ": Type missmatch." );
                        parser.errNo++;
                    }
                    if(var.type.tkind == Type.INTEGER && (e.tkind != Type.INTEGER && e.tkind != Type.CHARACTER)){
                        System.out.println( "Error in line " + parser.getLine() + ": Type missmatch." );
                        parser.errNo++;
                    }
                    if(var.type.tkind == Type.CHARACTER && e.tkind != Type.CHARACTER){
                        System.out.println( "Error in line " + parser.getLine() + ": Type missmatch." );
                        parser.errNo++;
                    }
                }
            :};

Expression ::= Expression:e AddOperator Term:t
            {:
                if(e.tkind == Type.REAL || t.tkind == Type.REAL){
                    RESULT = parser.symbolTable.getType("real");
                }
                else if(e.tkind == Type.INTEGER || t.tkind != Type.INTEGER){
                    RESULT = parser.symbolTable.getType("int");
                }
                else if(e.tkind == Type.CHARACTER && t.tkind == Type.CHARACTER){
                    RESULT = parser.symbolTable.getType("char");
                }
                else{
                    System.out.println( "Error in line " + parser.getLine() + ": Type missmatch." );
                    parser.errNo++;
                }
            :}
            | Term;

AddOperator ::= PLUS
            | MINUS;

Term ::= Term MulOperator Factor
        {:
            if(e.tkind == Type.REAL || t.tkind == Type.REAL){
                RESULT = parser.symbolTable.getType("real");
            }
            else if(e.tkind == Type.INTEGER || t.tkind != Type.INTEGER){
                RESULT = parser.symbolTable.getType("int");
            }
            else if(e.tkind == Type.CHARACTER && t.tkind == Type.CHARACTER){
                RESULT = parser.symbolTable.getType("char");
            }
            else{
                System.out.println( "Error in line " + parser.getLine() + ": Type missmatch." );
                parser.errNo++;
            }
        :}
        | Factor;

MulOperator ::= MUL
            | DIV
            | MOD;

Factor ::= ID:varName
        {:
            Variable var = parser.symbolTable.getVar(varName);

            if(var == null){
                System.out.println("Error in line " + parser.getLine() + ": Variable " + varName + " not declared.");
                RESULT = parser.symbolTable.getType("unknown");
                parser.errNo++;
            }
            else{
                RESULT = var.type;
                if(var.last_def == -1) {
                    System.out.println( "Error in line " + parser.getLine() + ": Variable " + varName + " not initialized.");
                    parser.errNo++;
                }
                var.last_use = parser.getLine();
            }
        :}
        | Const
        | LEFTPAR Expression RIGHTPAR;

ExpressionList ::= ExpressionList COMMA Expression
                | Expression;